AllBread
Samantha Hua (Poppy)
Ivina Wang (Sealie)
Jacc Chen (Large)
pd 7
---------------------
Cat Bakes Cake for GrandmaCat

/////////// Zone of Reflection \\\\\\\\\\\
------------------------------------------
OBSTACLES OVERCOME
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - We were originally using BufferedReader as a means of reading user input
but we changed our code to utilize Scanner. This allowed
us to read multiple lines of user input in a way that was easy for us
to understand. This change required us to consult previous homework
assignments, the think java textbook, and rumpus room lct's.
 - We struggled with implementing our scramble game in FarmerStand.java because
 of the new application of ArrayLists. We didn't know how to scramble the word
 multiple times within a game but eventually got it to work through adding and
 deleting the values every time the game was played as well as utilizing
 Math.random.
 - At first, we didn't quite understand how ANSI codes worked especially
 because we used one long string with multiple new line statements. Sectioning
 off certain points of the string was something we discovered and successfully
 implemented in our game.


UNRESOLVED ISSUES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - The way we scrambled words doesn't feel as efficient as it could be. While
 the code accomplishes the task, we would like to improve the algorithm so that
 the repeated code is minimized.
 - We let the terminal error messages guide us on what methods to make static/
 non-static but we are still a little puzzled about why certain things needed
 to be one vs the other.
 - Sometimes the higher/lower game in Barn.java does not return the messages
 about how close the guess was to the actual number. No error message is
 returned and this only occurs occasionally but we are puzzled by why it occurs.

COOL STUFF LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - javac *.java compiles all the .java files in the current directory. However,
if there is an error in one of the files, no files are complied. Compile
individually. We learned this as we developed some files before others and only
focused on those files.
 - We learned about ANSI codes to incorporate color into our game. We changed
features like background color and text color to emphasize certain parts of our
story line + dialogue.
 - We discovered System.exit(0) which ends the program like Ctrl+C. This was
 useful in forcing our game to end when the user has completed the goal.


MID-DEVELOPMENT DESIGN CHANGES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - We removed the map feature from our game because it over-complicated the
task beyond the amount of time we had to dedicate to this project.
 - We chose to allow the player to access any location from any point in the
 game. This simplified navigation through our game which was necessary with the
 time frame we had.
 - We also decided to create a Location.java parent class for the rest of our
location files (ex: RoseGarden, Barn, etc.) in order to simplify our code
and reduce any redundancies.


LESSONS LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - Develop the project in stages with small steps so that the issues you tackle
remain relatively small because of the few changes you have just made. In the
same vein, slowly build up your project so that the source of any errors are
always obvious.
 - Visualize your ideas through drawings and flowcharts before coding to fully
 understand the task on hand. It also helps to just write things down for the
 record in the (very likely) event you forget something.

||||||||||||||||||||||||||||||||||||||||||

 ______   ______   __   __   __       ______   _______
/_____/\ /_____/\ /_/\ /_/\ /_/\     /_____/\ /______/\
\:::_ \ \\::::_\/_\:\ \\ \ \\:\ \    \:::_ \ \\::::__\/__
 \:\ \ \ \\:\/___/\\:\ \\ \ \\:\ \    \:\ \ \ \\:\ /____/\
  \:\ \ \ \\::___\/_\:\_/.:\ \\:\ \____\:\ \ \ \\:\\_  _\/
   \:\/.:| |\:\____/\\ ..::/ / \:\/___/\\:\_\ \ \\:\_\ \ \
    \____/_/ \_____\/ \___/_(   \_____\/ \_____\/ \_____\/
==============================================================


2022-01-13
--------------------------------------------------------------
Jacc :: Suggested the goal of the game was to get items to bake a cake for grandma
        The journey of the character would be solo
Ivina :: Suggested the cake would be based off the Minecraft cake, so the player would
        look for ingredients like milk, eggs, sugar and wheat
Samantha :: The challenge could be to play different games in order to obtain different ingredients
All :: Worked on a list of what games + cs topics to include
==============================================================

2022-01-14
--------------------------------------------------------------
Jacc :: Suggested a map for the game + suggested that there would be a guessing game that
        would incorporate randomness
Ivina :: Suggested games like coin flip + cracking the code- user guesses a random three digit code
          with a higher/lower style
Samantha :: Suggested a scavenger hunt, where the player would collect items in exchange for ingredients
==============================================================

2022-01-16
--------------------------------------------------------------
Jacc :: Suggested that we remove the map element of the game in order to simplify it. Having
to print out and update the map after every motion of the user may be too large of a problem.
Ivina :: Suggested that we remove the cardinal directions from the possible choices the user could make.
Instead, the user could access any building from any point of the game.
Samantha :: Suggested that we should focus on a fewer amount of games in the interest of time.
Narrowed it down to crack the code (higher/lower), unscramble word, and scavenger hunt
==============================================================

2022-01-17
--------------------------------------------------------------
Jacc :: Noted we should create a v1 folder because our changes were beyond one version. The difference
being that v0 did not include a Location.java parent class.
Ivina :: Outlined the breakdown of the methods inside Home.java and the other location files.
Samantha :: Suggested the utilization of a parent class for the location files because of noticeable, repeated code.
==============================================================

2022-01-18
--------------------------------------------------------------
Jacc :: Implemented user inputs as Strings so that the program would not end if the computer could not read the
input as an integer. These edits make our code more flexible and dynamic. Suggested these edits go into v2 because
they are distinct from the previous versions. Reminded the group that .equals should be used for comparing Strings.
Ivina :: Suggested adding ASCII art to spice up our storyline. We realized there was an issue of the parent class
attempting to access child class methods which is a flaw with our inheritance tree. Ivina noted that the only
solution is to remove the leaveHome() method from the parent class.
Samantha :: Remembered the purpose of Scanner and brought up the topic for a group discussion on how to how
to move forward and implement Scanner. Suggested the use of accessor methods so that the same instance
variable can be referenced throughout the various files.
All :: Worked on linking the files correctly and implemented Bakery.java
==============================================================

2022-01-19
--------------------------------------------------------------
Jacc :: Implemented RoseGarden.java so that it would add a rose to the player's inventory. Discovered that
we needed to utilize the absolute value method to ensure that we were calculating the positive difference
between the user's guess and the random number.
Ivina :: Reminded the group that we need to be cognizant of if statement prioritization because
we need to check if the user has won the game first before calculating how hot/cold the guess was.
Worked out the math for how to create a random number within a range (pointed back to helpful assignments we have already done)
Samantha :: Suggested a new game where instead of a higher/lower game we should create a hot/cold game so
that guessing is harder as the user does not know if their guess is higher or lower in comparison to
the random number.
==============================================================

2022-01-20
--------------------------------------------------------------
Jacc :: Outlined the rest of the tasks we have to complete to finish our project. Set a broad timeline for the
remaining parts of our project so that we finish on time.
Ivina :: Edited the flowchart to reflect standard flowcharting convention. Refreshed the group on what to include
in a flowchart and how to visually indicate different elements.
Samantha :: Encountered a dilemma when tackling the scrambling word game. Debated how to properly scramble
the words (ArrayList<Character> vs char[]). Factored in things like ease to code, ease to understand, and
efficiency. Updated the import statements of all of the files so that we no longer utilize java.util.* (This
issue was brought up in a Piazza post)
==============================================================

2022-01-21
--------------------------------------------------------------
Jacc :: Discussed the way Strings and Characters would operate the same in our code as variable types within our ArrayList
for the unscramble game. Decided that we would use ArrayList<String> for simplification in our code.
Ivina :: Talked about how our scrambling algorithm should work so that we can create multiple random Strings from the same
array containing a word in the event that the game is played multiple times. Visually expressed the algorithm to see what
the for loops and array manipulations would look like.
Samantha :: Corrected the syntax of our ArrayList initialization by pointing to previous examples where we used
ArrayList.
==============================================================

2022-01-23
--------------------------------------------------------------
Jacc :: Pointed out that the user could rerun a method and the ArrayLists containing the words would
be doubled. Noticed a awkward part of our game where the user would receive the cake and be forced out of the bakery.
We changed it so that the user would have to confirm they want the cake. Discovered a way to make a section of the
String a certain color while leaving the rest of the String untouched. (Using two ANSI codes before and after the
section of text we want to be colored. The second ANSI code would reset the color for the remaining part of the String)
Ivina :: Found an error in our for loop in the unscramble game because we weren't asking for user input after
every iteration in the loop. Decided that we should change the background of questions to the user and the color
of barriers within the text ("======").
Samantha :: Solved the issue of the potentially doubled ArrayLists by clearing them at the end of the method.
Explored the way you can change background color as well as text color of print statements using ANSI codes.
Noticed that the methods we were calling from TerminallyIll were private instead of public like we needed them to be.
==============================================================

2022-01-28
--------------------------------------------------------------
Samantha :: Found a part of the game with poor color contrast which inhibited the user from playing the game.
Fixed this part of the code. Also found a bug where the scrambled array of Strings would sometimes be duplicated
if the user replayed the game. Went back into the code to fix this error. Updated the root directory in 
preparation for the gallery walk :)
==============================================================
